
name: Deploy
on:
  workflow_dispatch:
    inputs:
      region:
        description: 'BTP Subaccount Region'
        required: true
        default: 'ap10'
        type: string
      idp:
        description: 'Identity Provider'
        required: true
        type: string
      global_account_id:
        description: 'Global Account ID'
        required: true
        type: string
      tenantIssuerUri:
        description: 'Issuer URL'
        required: true
        type: string
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
        id-token: write # This is required for requesting the JWT
        contents: read  # This is required for actions/checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: latest

      - name: Initialize Terraform
        run: terraform init

      # - name: Get short-lived GitHub-issued JWT
      #   id: get-github-jwt
      #   run: |
      #       githubJwt=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{inputs.tenantIssuerUri}}" | jq -r '.value')
      #       echo $githubJwt | jq -R 'split(".") | .[0],.[1] | @base64d | fromjson'
      #       echo "githubJwt=$githubJwt" >> $GITHUB_OUTPUT
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client
      - name: Get Id Token
        uses: actions/github-script@v7
        id: idtoken
        env:
          TENANT_URL: ${{inputs.tenantIssuerUri}}
        with:
          script: |
            const tenanturl = process.env.TENANT_URL;
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken(tenanturl)
            coredemo.setOutput('githubJwt', id_token)
      - name: Print
        run: |
          jq ${{ steps.idtoken.outputs }}

      - name: Apply Terraform configuration
        run: |
          export BTP_ASSERTION="${{ steps.idtoken.outputs.githubJwt }}"
          export CF_ASSERTION_TOKEN="${{ steps.get-github-jwt.outputs.githubJwt }}"
          terraform apply -auto-approve -var "region=${{ inputs.region }}" -var "idp=${{ inputs.idp }}" -var "globalaccount=${{ inputs.global_account_id }}"
      - name: Terraform Destroy
        run: |
          export BTP_ASSERTION=$(echo "${{ steps.get-github-jwt.outputs.githubJwt }}")
          export CF_ASSERTION_TOKEN=$(echo "${{ steps.get-github-jwt.outputs.githubJwt }}")
          terraform destroy -auto-approve
        
